// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: IM.Login.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct IM_Login_IMLoginReq: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IMLoginReq"

  ///cmd id:		0x0103
  var clientType: IM_BaseDefine_ClientType = .unknown

  var clientVersion: String = String()

  var deviceToken: String = String()

  var accessToken: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.clientType)
      case 2: try decoder.decodeSingularStringField(value: &self.clientVersion)
      case 3: try decoder.decodeSingularStringField(value: &self.deviceToken)
      case 4: try decoder.decodeSingularStringField(value: &self.accessToken)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.clientType != .unknown {
      try visitor.visitSingularEnumField(value: self.clientType, fieldNumber: 1)
    }
    if !self.clientVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.clientVersion, fieldNumber: 2)
    }
    if !self.deviceToken.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceToken, fieldNumber: 3)
    }
    if !self.accessToken.isEmpty {
      try visitor.visitSingularStringField(value: self.accessToken, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct IM_Login_IMLoginRes: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IMLoginRes"

  ///cmd id:		0x0104
  var serverTime: UInt32 = 0

  var errCode: IM_BaseDefine_ResultType = .ok

  var errMsg: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.serverTime)
      case 2: try decoder.decodeSingularEnumField(value: &self.errCode)
      case 3: try decoder.decodeSingularStringField(value: &self.errMsg)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.serverTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.serverTime, fieldNumber: 1)
    }
    if self.errCode != .ok {
      try visitor.visitSingularEnumField(value: self.errCode, fieldNumber: 2)
    }
    if !self.errMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errMsg, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

///cmd id:		0x0105
struct IM_Login_IMLogoutReq: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IMLogoutReq"

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct IM_Login_IMLogoutRsp: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".IMLogoutRsp"

  ///cmd id:		0x0106
  var errCode: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.errCode)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.errCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "IM.Login"

extension IM_Login_IMLoginReq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_type"),
    2: .standard(proto: "client_version"),
    3: .standard(proto: "device_token"),
    4: .standard(proto: "access_token"),
  ]

  func _protobuf_generated_isEqualTo(other: IM_Login_IMLoginReq) -> Bool {
    if self.clientType != other.clientType {return false}
    if self.clientVersion != other.clientVersion {return false}
    if self.deviceToken != other.deviceToken {return false}
    if self.accessToken != other.accessToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IM_Login_IMLoginRes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "server_time"),
    2: .standard(proto: "err_code"),
    3: .standard(proto: "err_msg"),
  ]

  func _protobuf_generated_isEqualTo(other: IM_Login_IMLoginRes) -> Bool {
    if self.serverTime != other.serverTime {return false}
    if self.errCode != other.errCode {return false}
    if self.errMsg != other.errMsg {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IM_Login_IMLogoutReq: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  func _protobuf_generated_isEqualTo(other: IM_Login_IMLogoutReq) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IM_Login_IMLogoutRsp: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "err_code"),
  ]

  func _protobuf_generated_isEqualTo(other: IM_Login_IMLogoutRsp) -> Bool {
    if self.errCode != other.errCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
